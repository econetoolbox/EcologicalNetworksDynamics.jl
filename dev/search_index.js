var documenterSearchIndex = {"docs":
[{"location":"man/advanced-models/#Build-Advanced-Models","page":"Build Advanced Models","title":"Build Advanced Models","text":"","category":"section"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"In the previous section, we showed how to create relatively simple models. Here, we explain how to build more sophisticated models by modifying or adding the following features:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Functional Responses\nNon-Trophic Interactions\nTemperature Scaling\nExplicit Nutrient Dynamics\nCompetition Between Producers","category":"page"},{"location":"man/advanced-models/#Functional-Responses","page":"Build Advanced Models","title":"Functional Responses","text":"","category":"section"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"By default, the functional response is classic as in Yodzis and Innes, 1992, that is parameterized by the attack rate and the handling time. We write below the corresponding dynamical system:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"fracdB_idt = g(B_i)\n    + B_i sum_j in  textres  e_ij F_ij\n    - sum_j in  textcons  B_j F_ji\n    - x_i B_i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"F_ij = frac1m_i cdot\n    fracomega_ij a_ij B_j^h1 + c_i B_i\n    + h_t sum_k in  textres  omega_ik a_ik B_k^h","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"with:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"omega_ij preference of consumer i on resource j\nc_i the intensity of intraspecific predator interference in consumer i\nh the hill-exponent\na_ij the attack rate of consumer i on resource j\nh_t the handling time\nm_i the body mass of consumer i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"The parameters of the functional response can be customized. For example, the default hill exponent is 2 (type III functional response).","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"using EcologicalNetworksDynamics\nfw = Foodweb([2 => 1])\nm = default_model(fw)\nm.hill_exponent","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"But we can change its value, for instance to 1:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m.hill_exponent = 1 # Same as set_hill_exponent!(m, 1).\nm.hill_exponent # Check that the value has changed.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Above, we changed the value after the model was created. But this value can also be set when the model is created:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, ClassicResponse(; h = 1))\nm.hill_exponent","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Moreover, the dynamical system is often parameterized differently, with the bioenergetic functional response as in Williams, Brose and Martinez, that is parameterized with half-saturation density. In this case, the dynamical system reads:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"fracdB_idt = g(B_i)\n    + B_i sum_j in  textres  e_ij F_ij\n    - sum_j in  textcons  B_j F_ji\n    - x_i B_i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"F_ij = fracomega_ij B_j^hB_0^h + c_i B_i B_0^h\n    + sum_k in  textres  omega_ik B_k^h","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"with:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"omega_ij preference of consumer i on resource j\nB_0 the half-saturation density\nc_i the intensity of intraspecific predator interference\nh the hill-exponent","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"To change for the bioenergetic functional response, you can do:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, BioenergeticResponse())\nm.half_saturation_density[2] # Consumer half-saturation density.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"You can also tune the bioenergetic functional response. For instance, you can change the half-saturation density:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, BioenergeticResponse(; half_saturation_density = 0.1))\nm.half_saturation_density[2] # Check that the value is the one we set.","category":"page"},{"location":"man/advanced-models/#Non-Trophic-Interactions","page":"Build Advanced Models","title":"Non-Trophic Interactions","text":"","category":"section"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Food webs, and therefore trophic interactions, are at the core of the package. However, the importance of other interactions (hereafter non-trophic interactions) is increasingly recognized. For this reason, we offer the possibility to include non-trophic interactions in food web models. Four non-trophic interactions can be considered as in Miele et al., (2019):","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Competition for space between producers\nPlant facilitation (e.g. because of nitrogen fixation or seed dispersal)\nInterference between predators sharing a prey\nRefuge provisioning for prey","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"For example, let's compare the dynamics of a plant growing toward its carrying capacity with and without facilitation. In this simplistic setting, we do not consider trophic interactions, but only the focal plant (1)","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"using Plots\nENV[\"GKSwstype\"] = \"100\" # See https://documenter.juliadocs.org/stable/man/syntax/ # hide\n\nfw = Foodweb(zeros(Int, 2, 2))\nm_no_facilitation = default_model(fw)\nB0, t = [0.1], 10\nsol_no_facilitation = simulate(m_no_facilitation, B0, t)\nA = [0 0; 1 0]\nm_facilitation = default_model(fw, FacilitationLayer(; A))\nsol_no_facilitation = simulate(m_no_facilitation, B0, t)\nsol_facilitation = simulate(m_facilitation, [0.1], t)\nplot(\n    sol_no_facilitation;\n    xlabel = \"Time\",\n    ylabel = \"Biomass\",\n    idxs = [1],\n    label = \"without facilitation\",\n)\nplot!(sol_facilitation; idxs = [1], label = \"with facilitation\")\nsavefig(\"facilitation.svg\");\nnothing; # hide","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"(Image: Figure illustrating facilitation effect)","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"We observe that the plant grows faster with facilitation, as we intuitively expect.","category":"page"},{"location":"man/advanced-models/#Temperature-Scaling","page":"Build Advanced Models","title":"Temperature Scaling","text":"","category":"section"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"The metabolic theory of ecology (MTE) describes how species biological rates scale with temperature. We allow scaling the metabolic rates of species with temperature, following the MTE, as in Binzer et al. (2016). To do so, we simply have to pass the temperature to the model.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, Temperature(290)) # Note that the temperature is in Kelvin.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"For example, we can plot the attack rate as a function of temperature:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"fw = Foodweb([2 => 1])\nattack_rate = []\nT_values = 273.15:1:310.15\nfor T in T_values\n    local m = default_model(fw, Temperature(T))\n    push!(attack_rate, m.attack_rate[2])\nend\nplot(T_values, attack_rate; xlabel = \"Temperature (K)\", ylabel = \"Attack Rate\")\nsavefig(\"temperature-attack-rate.svg\");\nnothing; # hide","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"(Image: Figure of attack rate vs temperature)","category":"page"},{"location":"man/advanced-models/#Explicit-Nutrient-Dynamics","page":"Build Advanced Models","title":"Explicit Nutrient Dynamics","text":"","category":"section"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Producer growth dynamics is by default modelled by a logistic growth. But, we can also model explicit nutrient dynamics given by:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"fracmathrmd N_lmathrmd t = D_l(S_l - N_l)-sum^n_i=1c_liG_i(N)B_i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Where:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"N_l is the concentration of nutrient l\nD_l is the turnover rate of nutrient l\nS_l is the supply rate of nutrient l\nc_li is the nutrient concentration of producer i in nutrient l\nr_i is the intrinsic growth rate of producer i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Moreover, the producer growth G_i is given by:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"G_i(N) = min(fracN_1K_1i+N_1 dots fracN_lK_li+N_l) B_i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Where K_{li} is the half-saturation constant of producer i for nutrient l. For more details, see for instance Brose (2008).","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"To implement nutrient dynamics, we have to pass the corresponding component to the model.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, NutrientIntake(1))\nm.n_nutrients # Number of nutrients.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"We can of course change the number of nutrients:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, NutrientIntake(3))\nm.n_nutrients # Number of nutrients.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"We can also change the parameters of the nutrient dynamics, as the supply rate, the concentration, and the nutrient turnover rate:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, NutrientIntake(3; supply = 10.2))\nm.nutrients_supply # Supply rate of nutrients.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, NutrientIntake(3; turnover = 0.2))\nm.nutrients_turnover # Turnover rate of nutrients.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"m = default_model(fw, NutrientIntake(3; concentration = 0.9))\nm.nutrients_concentration # Concentration of nutrients.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Nutrient concentration is a matrix, where rows correspond to producers and columns to nutrients.","category":"page"},{"location":"man/advanced-models/#Competition-Between-Producers","page":"Build Advanced Models","title":"Competition Between Producers","text":"","category":"section"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"By default, producers follow logistic growth.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"G_i = 1 - fracB_iK_i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Where K_i is the carrying capacity of the producer i, and B_i is its biomass. But this formulation can be generalized to the case of competition between producers, thereby reading:","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"G_i = 1 - fracsum_j=1^S a_ij B_jK_i","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"Where a_{ij} is the competition coefficient between producer i and j. Producer competition can be implemented by modifying the producer growth component of the model.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"foodweb = Foodweb(zeros(Int, 2, 2)) # 2 producers.\ng_no_competition = LogisticGrowth(; producers_competition = [1 0; 0 1]) # Default.","category":"page"},{"location":"man/advanced-models/","page":"Build Advanced Models","title":"Build Advanced Models","text":"g_competition = LogisticGrowth(; producers_competition = [1 0.1; 0.9 1])","category":"page"},{"location":"man/components/#The-Ecological-Model-and-Components","page":"Bonus: The Model and its Components (advanced)","title":"The Ecological Model and Components","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"EcologicalNetworksDynamics represents an ecological network as a julia value of type Model.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"using EcologicalNetworksDynamics","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = default_model(Foodweb([:a => :b, :b => :c]))","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Values of this type essentially describe a graph, with various nodes compartments representing e.g. species or nutrients and various edges compartments representing e.g. trophic links, or facilitation links. In addition to the network topology, the model also holds data describing the model further, and brought by the various models components. There are three possible \"levels\" for this data:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Graph-level data describe properties of the whole system. e.g.  temperature, hill-exponent etc. These are typically scalar values.\nNode-level data describe properties of particular nodes in the graph: e.g. species body mass, nutrients turnover etc. These are typically vector values.\nEdge-level data describe properties of particular links: e.g. trophic links efficiency, half-saturation of a producer-to-nutrient links etc. These are typically matrix values.","category":"page"},{"location":"man/components/#Model-Properties","page":"Bonus: The Model and its Components (advanced)","title":"Model Properties","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"The data held by the model can be accessed via the various model properties, with functions named get_<X>:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"get_hill_exponent(m) # Graph-level data (a number).","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"get_body_masses(m) # Node-level data (a vector with one value per species).","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"get_efficiency(m) # Edge-level data (a matrix with one value per species interaction).","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Alternately, the data can also be accessed via julia's m.<x> property accessor:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m.hill_exponent # Same as get_hill_exponent(m).\nm.body_masses   # Same as get_body_masses(m).\nm.efficiency    # Same as get_efficiency(m).\nnothing # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Some data can be modified this way, either with set_<x>!(m, value). But not all:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"# Okay: this is terminal data.\nset_hill_exponent!(m, 2.1)\nm.hill_exponent = 2.1 # (alternate syntax for the same operation)\n\ntry # hide\n# Not okay: this could make the rest of the model data inconsistent.\nm.species_richness = 4\ncatch err; print(stderr, \"ERROR: \"); showerror(stderr, err); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"If you need a model with different values for read-only data, you need to build a new model with the values you desire.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = default_model(Foodweb([:a => :b, :b => [:c, :d]])) # Re-construct with a 4th species.\nm.species_richness # Now the value is what you want.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"The full list of available model properties can be queried with:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"properties(m)\nnothing # hide","category":"page"},{"location":"man/components/#Model-Components","page":"Bonus: The Model and its Components (advanced)","title":"Model Components","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"The Model value is very flexible and can represent a variety of different networks. It is made from the combination of various components.","category":"page"},{"location":"man/components/#Empty-Model-and-the-add!-Method.","page":"Bonus: The Model and its Components (advanced)","title":"Empty Model and the add! Method.","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"When you start from a default_model, you typically obtain a full-fledged value, with all the components required to simulate the dynamics. Alternately, you can start from an empty model:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = Model()","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"In this situation, you need to add the components one by one. But this gives you full control over the model content.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"An empty model cannot be simulated, because the data required for simulation is missing from it.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"try # hide\nsimulate(m, 0.5)\ncatch err; print(stderr, \"ERROR: \"); showerror(stderr, err); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Also, an empty model cannot be queried for data, because there is no data inside:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"try # hide\nm.richness\ncatch e; print(stderr, \"ERROR: \"); showerror(stderr, e); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"The most basic way to add a Species component to your model is to use the add! function:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"add!(m, Species(3))","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Now that the Species component has been added, the related properties can be queried from the model:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m.richness","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m.species_names","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"But the other properties cannot be queried, because the associated components are still missing:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"try # hide\nm.trophic_links\ncatch err; print(stderr, \"ERROR: \"); showerror(stderr, err); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Before we add the missing Foodweb component, let us explain that the component addition we did above actually happened in two stages.","category":"page"},{"location":"man/components/#Blueprints-Expand-into-Components.","page":"Bonus: The Model and its Components (advanced)","title":"Blueprints Expand into Components.","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"To add a component to a model, we first need to create a blueprint for the component. A blueprint is a julia value containing all the data needed to construct a component.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"sp = Species(3) # This is a blueprint, useful to later expand into a model component.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"When you call the add! function, you feed it with a model and a blueprint. The blueprint is read and expanded into a component within the given model:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = Model() # Empty model.\nadd!(m, sp) # Expand blueprint `sp` into a `Species` component within `m`.\nm           # The result is a model with 1 component inside.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"As we have seen before: once it has been expanded into the model, you cannot always edit the component data directly. For instance, the following does not work:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"try # hide\nm.species_names[2] = \"rhino\"\ncatch err; print(stderr, \"ERROR: \"); showerror(stderr, err); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"However, you can always edit the blueprint, then re-expand it later into other models.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"sp.names[2] = :rhino    # Edit one species name within the blueprint.\npush!(sp.names, :ficus) # Append a new species to the blueprint.\nm2 = Model(sp)          # Create a new model from the modified blueprint.\nm2                      # This new model contains the alternate data.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Blueprints can get sophisticated. For instance, here are various ways to create blueprints for a Foodweb component.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"fw = Foodweb(:niche, S = 5, C = 0.2) # From a random model.\nfw = Foodweb([0 1 0; 1 0 1; 0 0 0])  # From an adjacency matrix.\nfw = Foodweb([1 => 2, 2 => 3])       # From an adjacency list.\nnothing # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"If you want to test the corresponding Foodweb component, but you don't want to loose the original model, you can keep a safe copy of it before you actually expand the blueprint:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"base = copy(m) # Keep a safe, basic, incomplete version of the model.\nadd!(m, fw)    # Expand the foodweb into a new component within `m`: `base` remains unchanged.\nnothing # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"A shorter way to do so is to directly use julia's + operator, which always leaves the original model unchanged and creates an augmented copy of it:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = base + fw # Create a new model `m` with a Foodweb inside, leaving model `base` unchanged.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Separating blueprints creation from final components expansion gives you flexibility when creating your models. Blueprints can either be thrown after use, or kept around to be modified and reused without limits.","category":"page"},{"location":"man/components/#Model-Constraints.","page":"Bonus: The Model and its Components (advanced)","title":"Model Constraints.","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Of course, you cannot expand blueprints into components that would yield inconsistent models:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"base = Model(Species(3)) # A model a with 3-species compartment.\ntry # hide\nglobal m # hide\nm = base + Foodweb([0 1; 0 0]) # An adjacency matrix with only 2×2 values.\ncatch e; print(stderr, \"ERROR: \"); showerror(stderr, e); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Components cannot be removed from a model, because it could lead to inconsistent model values. Components cannot either be duplicated or replaced within a model:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = Model(Foodweb(:niche, S = 5, C = 0.2))\ntry # hide\nglobal m # hide\nm += Foodweb([:a => :b]) # Nope: already added.\ncatch e; print(stderr, \"ERROR: \"); showerror(stderr, e); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"If you ever feel like you need to \"change a component\" or \"remove a component\" from a model, the correct way to do so is to construct a new model from the blueprints and/or the other base models you have kept around.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Components also require each other: you cannot specify trophic links efficiency in your model without having first specified what trophic links are:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = Model(Species(3))\ntry # hide\nglobal m # hide\nm += Efficiency(4)\ncatch e; print(stderr, \"ERROR: \"); showerror(stderr, e); end # hide","category":"page"},{"location":"man/components/#Blueprint-Nesting-(advanced).","page":"Bonus: The Model and its Components (advanced)","title":"Blueprint Nesting (advanced).","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"To help you not hit the above problem too often, some blueprints take advantage of the fact that they contain the information needed to also expand into some of the components they require. Conceptually, they embed smaller blueprints within them.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"For instance, the following blueprint for a foodweb contains enough information to expand into both a Foodweb component, and the associated Species component if needed:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"fw = Foodweb([1 => 2, 2 => 3]) # Species nodes can be inferred from this blueprint..\nm = Model(fw) # .. a blank model given only this blueprint becomes equiped with the 2 components.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"So it is not an error to expand the Foodweb component into a model not already having a Species compartment. We say that the Foodweb blueprint implies a Species blueprint.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"If you need more species in your model than appear in your foodweb blueprint, you can still explicitly expand the Species blueprint before you add the foodweb:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = Model(Species(5), Foodweb([1 => 2, 2 => 3])) # A model with 2 isolated species.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Some blueprints, on the other hand, explicitly bring other blueprints. For instance, the LinearResponse brings both ConsumptionRate and ConsumersPreference sub-blueprints:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"lin = LinearResponse()","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"So a model given this single blueprint can expand with 3 additional components.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m += lin","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"The difference with \"implication\" though, is that the sub-blueprints \"brought\" do conflict with existing components:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = Model(fw, ConsumptionRate(2)) # This model already has a consumption rate.\ntry # hide\nglobal m # hide\nm += lin # So it is an error to bring another consumption rate with this blueprint.\ncatch e; print(stderr, \"ERROR: \"); showerror(stderr, e); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"This protects you from obtaining a model value with ambiguous consumption rates.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"To prevent the sub-blueprint ConsumptionRate from being brought, you need to explicitly remove it from the blueprint containing it:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"lin.alpha = nothing # Remove the brought sub-blueprint.\nlin = LinearResponse(alpha = nothing) # Or create directly without the brought sub-blueprint.\nm += lin # Consistent model obtained.","category":"page"},{"location":"man/components/#Using-the-Default-Model.","page":"Bonus: The Model and its Components (advanced)","title":"Using the Default Model.","text":"","category":"section"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Building a model from scratch can be tedious, because numerous components are required for the eventual simulation to take place.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Here is how you could do it with only temporary blueprints immediately dismissed:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = Model(\n  Foodweb([:a => :b, :b => :c]),\n  BodyMass(1),\n  MetabolicClass(:all_invertebrates),\n  BioenergeticResponse(),\n  LogisticGrowth(),\n  Metabolism(:Miele2019),\n  Mortality(0),\n)\nnothing # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Here is how you could do it with blueprints that you would keep around to later reassemble into other models:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"# Basic blueprints saved into variables for later edition.\nfw = Foodweb([:a => :b, :b => :c])\nbm = BodyMass(1)\nmc = MetabolicClass(:all_invertebrates)\nbe = BioenergeticResponse()\nlg = LogisticGrowth()\nmb = Metabolism(:Miele2019)\nmt = Mortality(0)\n\n# One model with all the associated components.\nm = Model() + fw + bm + mc + be + lg + mb + mt\nnothing # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"If this is too tedious, you can use the default_model function instead to automatically create a model with all (or most) components required for simulation. The only mandatory argument to default_model is a Foodweb blueprint:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"fw = Foodweb([:a => :b, :b => :c])\nm = default_model(fw)","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"But you can feed other blueprints into it to fine-tweak only the parameters you want to modify.","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = default_model(fw, BodyMass(Z = 1.5), Efficiency(2))\n(m.body_masses, m.efficiency)","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"The function default_model tries hard to figure the default model you expect based on the few blueprints you input. For instance, it assumes that you need a different type of functional response if you input a Temperature component, and temperature-dependent allometry rates:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = default_model(fw, Temperature(220))","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"Or if you wish to explicitly represent Nutrients as a separate nodes compartment in your ecological network:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = default_model(fw, Nutrients.Nodes(2))","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"But the function will not choose between two similar blueprints if you bring both, even implicitly:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"try # hide\nglobal m # hide\nm = default_model(\n  fw,\n  BodyMass(Z = 1.5),      # <- Customize body mass.\n  ClassicResponse(e = 2), # <- This blueprint also brings a BodyMassy\n)\ncatch e; print(stderr, \"ERROR: \"); showerror(stderr, e); end # hide","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"In this situation, either stop implicitly bringing BodyMass with ClassicResponse(e=2, M=nothing), or directly move you custom body mass input into the larger blueprint:","category":"page"},{"location":"man/components/","page":"Bonus: The Model and its Components (advanced)","title":"Bonus: The Model and its Components (advanced)","text":"m = default_model(\n  fw,\n  ClassicResponse(e = 2, M = (; Z = 1.5)),\n)","category":"page"},{"location":"lib/internals/#Internal-Documentation","page":"Internals","title":"Internal Documentation","text":"","category":"section"},{"location":"lib/internals/","page":"Internals","title":"Internals","text":"Documentation for EcologicalNetworksDynamics.jl internal interface.","category":"page"},{"location":"lib/internals/#Index","page":"Internals","title":"Index","text":"","category":"section"},{"location":"lib/internals/","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"lib/internals/#Functions","page":"Internals","title":"Functions","text":"","category":"section"},{"location":"lib/internals/","page":"Internals","title":"Internals","text":"Modules = [EcologicalNetworksDynamics.Internals]\nPublic = false","category":"page"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.GeneratedExpression","page":"Internals","title":"EcologicalNetworksDynamics.Internals.GeneratedExpression","text":"Wraps a Julia Expression generated by generate_dbdt. Mostly useful for pretty-printing, but you can evaluate it like a regular expression. The actual expression lies inside the .expr attribute.\n\n\n\n\n\n","category":"type"},{"location":"lib/internals/#Base.convert-Tuple{Type{EcologicalNetworksDynamics.Internals.FoodWeb}, EcologicalNetworksDynamics.Internals.MultiplexNetwork}","page":"Internals","title":"Base.convert","text":"Convert a MultiplexNetwork to a FoodWeb. The convertion consists in removing the non-trophic layers of the multiplex network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.filter-Tuple{Any, EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"Base.filter","text":"Filter species of the network (net) for which f(species_index, net) = true.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.length-Tuple{EcologicalNetworksDynamics.Internals.NutrientIntake}","page":"Internals","title":"Base.length","text":"length(n::NutrientIntake)\n\nNumber of nutrients in the nutrient intake model.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.map-Tuple{Any, EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"Base.map","text":"Transform species of the network (net) by applying f to each species.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, <inner parms>}","page":"Internals","title":"Base.show","text":"One line ModelParameters display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.BioRates}","page":"Internals","title":"Base.show","text":"One line BioRates display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.Environment}","page":"Internals","title":"Base.show","text":"One line Environment display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.FoodWeb}","page":"Internals","title":"Base.show","text":"One line FoodWeb display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.FunctionalResponse}","page":"Internals","title":"Base.show","text":"One line display FunctionalResponse\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.Layer}","page":"Internals","title":"Base.show","text":"One line Layer display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.MultiplexNetwork}","page":"Internals","title":"Base.show","text":"One line MultiplexNetwork display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.ProducerGrowth}","page":"Internals","title":"Base.show","text":"One line display FunctionalResponse\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, EcologicalNetworksDynamics.Internals.TemperatureResponse}","page":"Internals","title":"Base.show","text":"Base.show(io::IO, temperature_response::TemperatureResponse)\n\nOne-line TemperatureResponse display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, <inner parms>}","page":"Internals","title":"Base.show","text":"Multiline ModelParameters display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.BioRates}","page":"Internals","title":"Base.show","text":"Multiline BioRates display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.BioenergeticResponse}","page":"Internals","title":"Base.show","text":"Multiline BioenergeticResponse display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.ClassicResponse}","page":"Internals","title":"Base.show","text":"Multiline ClassicResponse display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.Environment}","page":"Internals","title":"Base.show","text":"Multiline Environment display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.ExponentialBA}","page":"Internals","title":"Base.show","text":"Multiline TemperatureResponse::ExponentialBA display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.FoodWeb}","page":"Internals","title":"Base.show","text":"Multiline FoodWeb display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.LinearResponse}","page":"Internals","title":"Base.show","text":"Multiline LinearResponse display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.LogisticGrowth}","page":"Internals","title":"Base.show","text":"Multiline LogisticGrowth display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.MultiplexNetwork}","page":"Internals","title":"Base.show","text":"Multiline MultiplexNetwork display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EcologicalNetworksDynamics.Internals.NutrientIntake}","page":"Internals","title":"Base.show","text":"Multiline NutrientIntake display.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.A_nti_full-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork, Function}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.A_nti_full","text":"Adjacency matrix of potential links given by the potential_links function in net.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.allometricparams_to_vec-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork, EcologicalNetworksDynamics.Internals.AllometricParams}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.allometricparams_to_vec","text":"Create species parameter vectors for a, b of length S (species richness) given the allometric parameters for the different metabolic classes (aₚ,aᵢ,...).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.allometricscale-Tuple{Any, Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.allometricscale","text":"Allometric scaling: parameter expressed as a power law of body-mass (M).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.asymmetrize-Tuple{Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.asymmetrize","text":"asymmetrize(V)\n\nRemove duplicate tuples from a symmetric vector of tuples. A vector V of tuples is said to be symmetric ⟺ ((i,j) ∈ V ⟺ (j,i) ∈ V). The tuple that has its 1st element less than its 2nd element is kept i.e. if i < j (i,j) is kept, and (j,i) otherwise.\n\nSee also symmetrize.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.clean_labels-Tuple{Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.clean_labels","text":"Check that labels have the correct format and convert them to Strings if needed.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.clean_metabolic_class-Tuple{Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.clean_metabolic_class","text":"Check that provided metabolic classes are valid.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.consumption-Tuple{Any, Any, <inner parms>, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.consumption","text":"Compute consumption terms of ODEs.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.dudt!-NTuple{4, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.dudt!","text":"dudt!(du, u, p, _)\n\nCompute the species and nutrient (when relevant) abundance derivatives du, given the abundances u and the model p. The last silent argument is the time at which is evaluated the derivatives and is a requirement of DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.effect_competition-Tuple{Any, Any, Any, EcologicalNetworksDynamics.Internals.MultiplexNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.effect_competition","text":"Effect of competition on the net growth rate.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.effect_facilitation-Tuple{Any, Any, Any, EcologicalNetworksDynamics.Internals.MultiplexNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.effect_facilitation","text":"Effect of facilitation on intrinsic growth rate.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.effect_refuge-Tuple{Any, Any, EcologicalNetworksDynamics.Internals.MultiplexNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.effect_refuge","text":"Effect of refuge on attack rate.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.fill_sparsematrix-Tuple{Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.fill_sparsematrix","text":"fill_sparsematrix(scalar, template_matrix)\n\nReturn a matrix filled with a constant (scalar) for indexes where the value of the template_matrix is non-zero.\n\nExamples\n\njulia> template_matrix = ones(2, 2);\n\njulia> Internals.fill_sparsematrix(10, template_matrix)\n2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n 10.0  10.0\n 10.0  10.0\n\njulia> template_matrix[1, 1] = 0;\n\njulia> Internals.fill_sparsematrix(10, template_matrix)\n2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 3 stored entries:\n   ⋅   10.0\n 10.0  10.0\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.get_trophic_adjacency-Tuple{EcologicalNetworksDynamics.Internals.FoodWeb}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.get_trophic_adjacency","text":"Return the adjacency matrix of the trophic interactions.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.invertebrates-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.invertebrates","text":"Return indices of the invertebrates of the network (net).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.is_model_net_valid-Tuple{Any, Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.is_model_net_valid","text":"Check that net does not contain cycles and does not have disconnected nodes.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.isinvertebrate-Tuple{Any, EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.isinvertebrate","text":"Is species i an invertebrate?\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.isvertebrate-Tuple{Any, EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.isvertebrate","text":"Is species i an ectotherm vertebrate?\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.mass_ratio-Tuple{<inner parms>}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.mass_ratio","text":"mass_ratio(p::ModelParameters)\n\nMean predator-prey body mass ratio given the model parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.mass_ratio-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.mass_ratio","text":"mass_ratio(network::EcologicalNetwork)\n\nMean predator-prey body mass ratio given the network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.model_foodweb-Tuple{Any, Any, Int64}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.model_foodweb","text":"Generate a food web of S species and number of links L from a structural model. Loop until the generated has a number of links in [L - ΔL; L + ΔL]. If the maximum number of iterations is reached an error is thrown instead.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.model_foodweb_from_C-NTuple{8, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.model_foodweb_from_C","text":"Generate a food web of S species and connectance C from a structural model. Loop until the generated has connectance in [C - ΔC; C + ΔC].\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.number_of_resource-Tuple{Any, SparseArrays.SparseMatrixCSC{Bool, Int64}}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.number_of_resource","text":"Number of resources species i is feeding on.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.number_of_resource-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.number_of_resource","text":"Return a vector where element i is the number of resource(s) of species i.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.nutrient_dynamics-Tuple{<inner parms>, Vararg{Any, 4}}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.nutrient_dynamics","text":"nutrient_dynamics(model::ModelParameters, B, i_nutrients, n, G)\n\nCompute the dynamics of the nutrient i_nutrient given its abundance n, the species biomass B and the vector of species growths G and the model p.\n\nThe nutrient dynamics is applicable only if p is of type NutrientIntake.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.parse_pair-Tuple{Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.parse_pair","text":"Parse pairs within FoodWeb() method working on adjacency list.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.predators-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.predators","text":"Return indices of the predators of the given network.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.preys-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.preys","text":"Return indices of the preys of the network (net).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.process_idxs-Tuple{Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.process_idxs","text":"process_idxs(solution; idxs = nothing)\n\nCheck and sanitize the species indices or names provided (idxs). Used in extract_last_timesteps and living_species.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.replace-Tuple{Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.replace","text":"Construct a copy of the expression with the replacements given in rep.\n\njulia> import EcologicalNetworksDynamics.Internals: replace\n\njulia> replace(:(a + (b + c / a)), Dict(:a => 5, :b => 8))\n:(5 + (8 + c / 5))\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.replace_vertebrates!-Tuple{Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.replace_vertebrates!","text":"Does the user want to replace 'vertebrates' by 'ectotherm vertebrates'?\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.share_prey-Tuple{Any, Any, SparseArrays.SparseMatrixCSC{Bool, Int64}}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.share_prey","text":"Do species i and j share at least one prey?\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.symmetrize-Tuple{Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.symmetrize","text":"symmetrize(V)\n\nAdd symmetric tuples from an asymmetric vector of tuples. A vector V of tuples is said to be asymmetric ⟺ ((i,j) ∈ V ⇒ (j,i) ∉ V).\n\nSee also asymmetrize.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.vertebrates-Tuple{EcologicalNetworksDynamics.Internals.EcologicalNetwork}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.vertebrates","text":"Return indices of the vertebrates of the network (net).\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#EcologicalNetworksDynamics.Internals.xp_sum-Tuple{Any, Any, Any}","page":"Internals","title":"EcologicalNetworksDynamics.Internals.xp_sum","text":"Repeat the given expression into terms of a sum, successively replacing indexes in term by elements in (zipped) lists.\n\njulia> import EcologicalNetworksDynamics.Internals: xp_sum\n\njulia> xp_sum([:i], [[1, 2, 3]], :(u^i)) #  Three terms.\n:(u ^ 1 + u ^ 2 + u ^ 3)\n\njulia> xp_sum([:i], [[1]], :(u^i)) #  Single term.\n:(u ^ 1)\n\njulia> xp_sum([:i], [[]], :(u^i)) #  No terms.\n0\n\njulia> xp_sum([:i, :j], [[:a, :b, :c], [5, 8, 13]], :(j * i)) #  Zipped indices.\n:(5a + 8b + 13c)\n\n\n\n\n\n","category":"method"},{"location":"man/output-analysis/#Analyse-the-Simulated-Dynamics","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"","category":"section"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"Once the dynamics of the community have been simulated, we can analyse the results to better understand the behaviour of the community. To do so, we provide a few functions to compute various properties of the community dynamics.","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"Let's first simulate the dynamics of a species-rich community with the niche model:","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"using EcologicalNetworksDynamics, Plots\nENV[\"GKSwstype\"] = \"100\" # See https://documenter.juliadocs.org/stable/man/syntax/ # hide\n\nS = 20 # Number of species.\nC = 0.1 # Connectance.\nfoodweb = Foodweb(:niche; S, C)\nm = default_model(foodweb)\nB0 = rand(S) # Vector of initial biomasses.\nt = 100 # Simulation time.\nsol = simulate(m, B0, t)","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"When running the dynamics of a rich initial pool of species, we generally observe the extinction of some species. You can access the number of surviving species at the end of the simulation with:","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"richness(sol[end]) # Number of surviving species at the end of the simulation.","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"You can also get the trajectory of the species richness through time with:","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"richness(sol) # Richness at each time step.","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"Similarly, you can compute the persistence, that is the proportion of species that are present at each time step:","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"persistence(sol) # Equivalent to: richness(sol) ./ S","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"Or the total biomass of the community:","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"total_biomass(sol)","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"Or the shannon diversity index:","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"shannon_diversity(sol)","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"For example, you can plot how a few of these properties evolve through time:","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"time = sol.t\nplot(\n    time,\n    total_biomass(sol);\n    xlabel = \"Time\",\n    ylabel = \"Observable\",\n    label = \"Total biomass\",\n)\nplot!(time, richness(sol); label = \"Richness\")\nplot!(time, shannon_diversity(sol); label = \"Shannon diversity\")\nsavefig(\"output-analysis.png\") # hide\nnothing # hide","category":"page"},{"location":"man/output-analysis/","page":"Analyse the Simulated Dynamics","title":"Analyse the Simulated Dynamics","text":"(Image: Figure of the simulation)","category":"page"},{"location":"man/foodwebs/#Generate-Food-Webs","page":"Generate Food Webs","title":"Generate Food Webs","text":"","category":"section"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"Food webs are at the core of this package, and thus can be generated in various ways depending on your needs. In the following sections, we will go over the different methods of network generation. But, first things first, let us see what is inside a Foodweb.","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"A Foodweb object contains the trophic adjacency matrix A filled with 0s and 1s indicating respectively the absence and presence of trophic interactions. Rows are consumers and columns resources, thus A[i,j] = 1 reads \"species i eats species j\"","category":"page"},{"location":"man/foodwebs/#From-an-Adjacency-Matrix","page":"Generate Food Webs","title":"From an Adjacency Matrix","text":"","category":"section"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"The most straightforward way to generate a Foodweb is to define your own adjacency matrix (A) by hand and give it to the Foodweb method that will return the corresponding Foodweb object.","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"using EcologicalNetworksDynamics","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"A = [0 0 0; 1 0 0; 0 1 0] # 1 <- 2 <- 3.\nfoodweb = Foodweb(A)","category":"page"},{"location":"man/foodwebs/#From-an-Adjacency-List","page":"Generate Food Webs","title":"From an Adjacency List","text":"","category":"section"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"Sometimes it is more convenient to define the food web using an adjacency list, because adjacency lists are often more readable than adjacency matrices. Adjacency lists are a list of pairs, where each pair is a consumer-resource interaction.","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"For instance, the food web presented in the previous example can be defined as:","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"list = [2 => 1, 3 => 2]\nfoodweb = Foodweb(list)","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"Species can also be named with strings or symbols:","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"list = [:eagle => :rabbit, :rabbit => :grass]\nfoodweb = Foodweb(list)","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"Creating a Foodweb from your own adjacency matrix or list is straightforward, but this is mostly useful for simple and small 'toy systems'. If you want to work with Foodwebs with a large size and a realistic structure, it is more suitable to create the Foodweb using structural models.","category":"page"},{"location":"man/foodwebs/#From-a-Structural-Model","page":"Generate Food Webs","title":"From a Structural Model","text":"","category":"section"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"You can use the niche, or the cascade model to generate a food web. The niche model requires a number of species, and either a connectance C or a number of links L.","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"fw1 = Foodweb(:niche; S = 5, C = 0.2)","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"fw2 = Foodweb(:niche; S = 5, L = 5)","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"The cascade model requires a number of species and a connectance:","category":"page"},{"location":"man/foodwebs/","page":"Generate Food Webs","title":"Generate Food Webs","text":"fw3 = Foodweb(:cascade; S = 5, C = 0.2)","category":"page"},{"location":"man/simulate/#Simulate-the-Community-Dynamics","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"","category":"section"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"Previous sections tackled how to create a model representing the desired ecological community. We now explain how to simulate the dynamics of this community. In short, we provide a function simulate that takes a model and a time interval as input and returns the temporal trajectory of the community. This function uses the DifferentialEquations package to solve the system of ordinary differential equations.","category":"page"},{"location":"man/simulate/#Basic-Usage","page":"Simulate the Community Dynamics","title":"Basic Usage","text":"","category":"section"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"Let's first illustrate how to simulate a simple community of three species.","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"using EcologicalNetworksDynamics, Plots\nENV[\"GKSwstype\"] = \"100\" # See https://documenter.juliadocs.org/stable/man/syntax/ # hide\n\nfoodweb = Foodweb([3 => 2, 2 => 1])\nm = default_model(foodweb)\nB0 = rand(3) # Vector of initial biomasses.\nt = 1_000\nsol = simulate(m, B0, t)","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"We can access the solution of the simulation with the output of the simulate function. We list below some useful properties of the solution:","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"sol.t # Time steps.\nsol.u # Biomasses at each time step.\nsol.u[1] # Biomasses of the first time step.\nsol.u[end] # Biomasses of the last time step.","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"The solution can be plotted with the plot function from the Plots package.","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"plot(sol)\nsavefig(\"simulation.svg\") # hide\nnothing # hide","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"(Image: Figure of the simulation)","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"The duration of the simulation can be changed with, for instance to reduce the simulation time to 100 time units:","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"smaller_t = 100\nsol = simulate(m, B0, smaller_t)\nsol.t[end] # The last time step.","category":"page"},{"location":"man/simulate/#Callbacks","page":"Simulate the Community Dynamics","title":"Callbacks","text":"","category":"section"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"We will now go through some advanced features of the simulate function. First, the callback keyword argument allows specifying a function that will be called at each time step of the simulation. We provide a built-in callback extinction_callback which extinguishes the species whose biomass falls below a given threshold. This threshold is set by default to 1e-12, but can be changed. Moreover, species extinctions can be printed to the console with the verbose keyword argument.","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"foodweb = Foodweb([3 => 1, 2 => 1]) # Two predators feeding on one prey.\nm = default_model(foodweb, Metabolism([0, 0.1, 100.0])) # Predator (3) has a too high metabolic rate to survive.\nsol = simulate(m, [1, 1, 1], 100_000; callback = nothing) # No callback.\nsol[end]","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"callback = extinction_callback(m, 1e-6; verbose = true)\nsol = simulate(m, [1, 1, 1], 100_000; callback) # High extinction threshold.\nsol[end]","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"callback = extinction_callback(m, 1e-12; verbose = true)\nsol = simulate(m, [1, 1, 1], 100_000; callback) # Low extinction threshold.\nsol[end]","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"Other callback functions are available in the DiffEqCallbacks package, and can be used in the same way.","category":"page"},{"location":"man/simulate/#Choose-a-Specific-Solver","page":"Simulate the Community Dynamics","title":"Choose a Specific Solver","text":"","category":"section"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"Depending on your needs, you may want to choose a specific solver for the simulation. As we use the solve function of the DifferentialEquations package, we can pass any solver available in this package (see the list of available solvers). Indeed, we allow the user to pass any keyword argument of the solve function to the simulate function.","category":"page"},{"location":"man/simulate/","page":"Simulate the Community Dynamics","title":"Simulate the Community Dynamics","text":"import DifferentialEquations: Tsit5\n\nsol = simulate(m, [1, 1, 1], 1_000; alg = Tsit5())\nsol.alg","category":"page"},{"location":"lib/public/#Public-documentation","page":"Public","title":"Public documentation","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Documentation for EcologicalNetworksDynamics.jl public interface.","category":"page"},{"location":"lib/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#Functions","page":"Public","title":"Functions","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Modules = [EcologicalNetworksDynamics]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"lib/public/#EcologicalNetworksDynamics.default_model-Tuple{Vararg{Union{EcologicalNetworksDynamics.Framework.Blueprint{<inner parms>}, EcologicalNetworksDynamics.Framework.BlueprintSum{<inner parms>}}}}","page":"Public","title":"EcologicalNetworksDynamics.default_model","text":"default_model(\nfoodweb::Foodweb;\nkwargs...\n\n)\n\nGenerate a model from a food web with parameters set to default values.\n\nLet's first illustrate the use of default_model with a simple example.\n\nfoodweb = Foodweb([1 => 2])\ndefault_model(foodweb)\n\nIn this example, all parameters are set to default values, however for your needs, you can override any of the default parameters. For instance, if you want to override the default metabolic rate, you can do it as follows:\n\nmy_x = [0.0, 1.2] # One value per species.\ndefault_model(foodweb, Metabolism(my_x))\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.persistence-Tuple{AbstractVector}","page":"Public","title":"EcologicalNetworksDynamics.persistence","text":"persistence(vec::AbstractVector; threshold = 0)\n\nFraction of alive species given a biomass vector vec. See richness for details.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.persistence-Tuple{SciMLBase.AbstractODESolution}","page":"Public","title":"EcologicalNetworksDynamics.persistence","text":"persistence(solution::AbstractODESolution; threshold = 0)\n\nFraction of alive species at each timestep of the simulation. See richness for details.\n\nExamples\n\njulia> S = 20 # Initial number of species.\n       foodweb = Foodweb(:niche; S = 20, C = 0.1)\n       m = default_model(foodweb)\n       B0 = rand(S)\n       sol = simulate(m, B0)\n       all(persistence(sol) .== richness(sol) / S)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.richness-Tuple{AbstractVector}","page":"Public","title":"EcologicalNetworksDynamics.richness","text":"richness(vec::AbstractVector; threshold = 0)\n\nReturn the number of alive species given a biomass vector vec. By default, species are considered extinct if their biomass is 0. But, this threshold can be changed using the corresponding keyword argument.\n\nExamples\n\njulia> foodweb = Foodweb([0 0; 1 0])\n       m = default_model(foodweb)\n       B0 = [0.5, 0.5]\n       sol = simulate(m, B0)\n       richness(sol[end]) # Richness at the end of the simulation.\n2.0\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.richness-Tuple{SciMLBase.AbstractODESolution}","page":"Public","title":"EcologicalNetworksDynamics.richness","text":"richness(solution::Solution; threshold = 0)\n\nReturn the number of alive species at each timestep of the simulation. solution is the output of simulate. By default, species are considered extinct if their biomass is 0. But, this threshold can be changed using the corresponding keyword argument.\n\nExamples\n\nLet's start with a simple example where the richness remains constant:\n\njulia> foodweb = Foodweb([0 0; 1 0])\n       m = default_model(foodweb)\n       B0 = [0.5, 0.5]\n       sol = simulate(m, B0)\n       richness_trajectory = richness(sol)\n       all(richness_trajectory .== 2) # At each timestep, there are 2 alive species.\ntrue\n\nNow let's assume that the producer is extinct at the beginning of the simulation, while its consumer is not. We expect to observe a decrease in richness from 1 to 0 over time.\n\njulia> B0 = [0, 0.5] # The producer is extinct at the beginning.\n       sol = simulate(m, B0)\n       richness_trajectory = richness(sol)\n       richness_trajectory[1] == 1 && richness_trajectory[end] == 0\ntrue\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.shannon_diversity-Tuple{AbstractVector}","page":"Public","title":"EcologicalNetworksDynamics.shannon_diversity","text":"shannon_diversity(vec::AbstractVector; threshold = 0)\n\nShannon diversitty index given a biomass vector `vec Shannon diversity is a measure of species diversity based on the entropy. According to the Shannon index, for a same number of species, the more evenly the biomass is distributed among them, the higher the diversity.\n\nExample\n\nWe consider a simple example with 3 species, but different shannon diversity.\n\njulia> s1 = shannon_diversity([1, 1, 1])\n       s2 = shannon_diversity([1, 1, 0.1])\n       s3 = shannon_diversity([1, 1, 0.01])\n       s1 > s2 > s3\ntrue\n\nWe observe as we decrease the biomass of the third species, the shannon diversity tends to 2, as we tend towards an effective two-species community.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.shannon_diversity-Tuple{SciMLBase.AbstractODESolution}","page":"Public","title":"EcologicalNetworksDynamics.shannon_diversity","text":"shannon_diversity(solution::AbstractODESolution; threshold = 0)\n\nShannon diversity index at each timestep of the simulation. solution is the output of simulate. Shannon diversity is a measure of species diversity based on the entropy. According to the Shannon index, for a same number of species, the more evenly the biomass is distributed among them, the higher the diversity.\n\nExample\n\nWe start a simple simulation with even biomass distribution, therefore we expect the Shannon diversity to decrease over time as the biomass of the species diverge from each other.\n\njulia> foodweb = Foodweb([0 0; 1 0])\n       m = default_model(foodweb)\n       B0 = [0.5, 0.5] # Even biomass, maximal shannon diversity.\n       sol = simulate(m, B0)\n       shannon_trajectory = shannon_diversity(sol)\n       biomass_trajectory[1] > biomass_trajectory[end]\ntrue\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.total_biomass-Tuple{AbstractVector}","page":"Public","title":"EcologicalNetworksDynamics.total_biomass","text":"total_biomass(vec::AbstractVector)\n\nTotal biomass of a community given a biomass vector vec.\n\nExamples\n\njulia> total_biomass([0.5, 1.5]) # 0.5 + 1.5 = 2.0\n2.0\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#EcologicalNetworksDynamics.total_biomass-Tuple{SciMLBase.AbstractODESolution}","page":"Public","title":"EcologicalNetworksDynamics.total_biomass","text":"total_biomass(solution::AbstractODESolution)\n\nTotal biomass of a community at each timestep of the simulation. solution is the output of simulate.\n\nExample\n\nLet's consider a consumer feeding on a producer, and let's start the simulation with the producer extinction so we can observe the consumer's biomass decrease over time.\n\njulia> foodweb = Foodweb([0 0; 1 0])\n       m = default_model(foodweb)\n       B0 = [0, 0.5] # The producer is extinct at the beginning.\n       sol = simulate(m, B0)\n       biomass_trajectory = total_biomass(sol)\n       biomass_trajectory[1] == 0.5 && biomass_trajectory[end] == 0\ntrue\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Types","page":"Public","title":"Types","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"Modules = [EcologicalNetworksDynamics]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"lib/public/#EcologicalNetworksDynamics.Foodweb","page":"Public","title":"EcologicalNetworksDynamics.Foodweb","text":"The Foodweb component, aka. \"Trophic layer\", adds a set of trophic links connecting species in the model. This is one of the most structuring components.\n\nBlueprint Creation from Raw Links.\n\nFrom an adjacency list:\n\njulia> fw = Foodweb([:a => :b, :b => [:c, :d]])\nblueprint for Foodweb with 2 trophic links:\n  A:\n  :a eats :b\n  :b eats :c and :d\n\njulia> Model(fw) # Automatically brings a 'Species' component.\nModel with 2 components:\n  - Species: 4 (:a, :b, :c, :d)\n  - Foodweb: 3 links\n\njulia> Model(Foodweb([4 => [2, 1], 2 => 1])) #  From species indices.\nModel with 2 components:\n  - Species: 4 (:s1, :s2, :s3, :s4)\n  - Foodweb: 3 links\n\nFrom a matrix:\n\njulia> fw = Foodweb([0 0 1; 1 0 1; 0 0 0])\nblueprint for Foodweb with 3 trophic links:\n  A: 3×3 SparseArrays.SparseMatrixCSC{Bool, Int64} with 3 stored entries:\n ⋅  ⋅  1\n 1  ⋅  1\n ⋅  ⋅\n\njulia> Model(fw)\nModel with 2 components:\n  - Species: 3 (:s1, :s2, :s3)\n  - Foodweb: 3 links\n\nBlueprint Creation from Random Models.\n\nCascade model: specify the desired number of species S and connectance C.\n\njulia> using Random\n       Random.seed!(12)\n       fw = Foodweb(:cascade; S = 5, C = 0.2)\nblueprint for Foodweb with 5 trophic links:\n  A: 5×5 SparseArrays.SparseMatrixCSC{Bool, Int64} with 5 stored entries:\n ⋅  1  ⋅  1  1\n ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  1  ⋅\n ⋅  ⋅  ⋅  ⋅  1\n ⋅  ⋅  ⋅  ⋅  ⋅\n\nRandom foodwebs are drawn until the desired connectance is obtained, within a tolerance level defaulted to tol_C = 0.1 * C, modifiable as a keyword argument.\n\nNiche model: either specify the connectance C or number of links L.\n\njulia> fw = Foodweb(:niche; S = 5, C = 0.2) #  From connectance.\nblueprint for Foodweb with 5 trophic links:\n  A: 5×5 SparseArrays.SparseMatrixCSC{Bool, Int64} with 5 stored entries:\n ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅\n 1  1  ⋅  ⋅  ⋅\n ⋅  ⋅  1  ⋅  ⋅\n 1  1  ⋅  ⋅  ⋅\n\njulia> fw = Foodweb(:niche; S = 5, L = 4) #  From number of links.\nblueprint for Foodweb with 4 trophic links:\n  A: 5×5 SparseArrays.SparseMatrixCSC{Bool, Int64} with 4 stored entries:\n ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅\n ⋅  ⋅  ⋅  ⋅  ⋅\n 1  ⋅  ⋅  ⋅  ⋅\n 1  1  1  ⋅  ⋅\n\nThe default tolerance levels for the niche model are tol_C = 0.1 * C and tol_L = 0.1 * L, modifiable as keyword arguments.\n\nFor either random model, the following keyword arguments can also be specified:\n\nreject_cycles = false (default): raise to forbid trophic cycles.\nreject_if_disconnected = true (default): lower to allow disconnected trophic networks.\nmax_iterations = 10^5 (default): give up if no satisfying network can be found after this number of random trials.\n\nProperties.\n\nA model m with a Foodweb has the following properties.\n\nm.A or m.trophic_links: a view into the matrix of trophic links.\nm.n_trophic_links: the number of trophic links in the model.\nm.trophic_levels: calculate the trophic level of every species in the model.\nDistinguishing between producers (species without outgoing trophic links) and consumers (species with outgoing trophic links):\nm.{producers,consumers}_mask: a boolean vector to select either kind of species.\nm.n_{producers,consumers}: count number of species of either kind.\nis_{producer,consumer}(m, i): check whether species i (name or index) is of either kind.\nm.{producers,consumer}_indices: iterate over either species kind indices.\nm.{producers,consumer}_{sparse,dense}_index: obtain a species_name mapsto species_index mapping:\nthe sparse index yields indices valid within the whole collection of species.\nthe dense index yields indices only valid within the restricted collection of species of either kind.\nDistinguishing betwen preys (species with incoming trophic links) and tops predators (species without incoming trophic links) works the same way.\nm.producers_links: boolean matrix highlighting potential links between producers.\nm.herbivorous_links: highlight only consumer-to-producer trophic links.\nm.carnivorous_links: highlight only consumer-to-consumer trophic links.\n\njulia> m = Model(Foodweb([:a => :b, :b => [:c, :d], :d => :e]));\n\njulia> m.n_trophic_links\n4\n\njulia> m.A\n5×5 EcologicalNetworksDynamics.TrophicLinks:\n 0  1  0  0  0\n 0  0  1  1  0\n 0  0  0  0  0\n 0  0  0  0  1\n 0  0  0  0  0\n\njulia> m.trophic_levels\n5-element EcologicalNetworksDynamics.TrophicLevels:\n 3.5\n 2.5\n 1.0\n 2.0\n 1.0\n\njulia> m.producers_mask\n5-element EcologicalNetworksDynamics.ProducersMask:\n 0\n 0\n 1\n 0\n 1\n\njulia> m.preys_mask\n5-element EcologicalNetworksDynamics.PreysMask:\n 0\n 1\n 1\n 1\n 1\n\njulia> m.n_producers, m.n_consumers\n(2, 3)\n\njulia> m.n_tops, m.n_preys\n(1, 4)\n\njulia> is_top(m, 1), is_top(m, 2)\n(true, false)\n\njulia> collect(m.consumers_indices)\n3-element Vector{Int64}:\n 1\n 2\n 4\n\njulia> m.producers_sparse_index\nOrderedCollections.OrderedDict{Symbol, Int64} with 2 entries:\n  :c => 3\n  :e => 5\n\njulia> m.producers_dense_index\nOrderedCollections.OrderedDict{Symbol, Int64} with 2 entries:\n  :c => 1\n  :e => 2\n\njulia> m.producers_links\n5×5 EcologicalNetworksDynamics.ProducersLinks:\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  1  0  1\n 0  0  0  0  0\n 0  0  1  0  1\n\njulia> m.herbivorous_links\n5×5 EcologicalNetworksDynamics.HerbivorousLinks:\n 0  0  0  0  0\n 0  0  1  0  0\n 0  0  0  0  0\n 0  0  0  0  1\n 0  0  0  0  0\n\njulia> m.carnivorous_links\n5×5 EcologicalNetworksDynamics.CarnivorousLinks:\n 0  1  0  0  0\n 0  0  0  1  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#EcologicalNetworksDynamics.Model","page":"Public","title":"EcologicalNetworksDynamics.Model","text":"Model is the main object that we hand out to user which contains all the information about the underlying ecological model.\n\nCreate a Model\n\nThe most straightforward way to create a model is to use default_model. This function only requires you to specify the trophic network.\n\nfw = [1 => 2, 2 => 3]\nmodel = default_model(fw)\n\nThis function will help you to create a model with ease, however it relies on default values for the parameters, which are not always suitable for your specific case, even though extracted from the literature.\n\nTo create a model with custom parameters, you can pass other arguments to default_model.\n\nmodel = default_model(fw, BodyMass(; Z = 100))\n\nFor instance, the above example creates a model with a body mass distribution with a predator-prey mass ratio of 100.\n\nIt is also possible to create a model manually by adding the components one by one. First, create an empty model:\n\nm = Model()\n\nThen add your components one by one. Note that you have to add the components in the right order, as some components depend on others. Moreover, some components are mandatory. Specifically, you need to provide a food web, species body masses, a functional response, metabolic rates and a producer growth function.\n\nm = Model()\nm += Foodweb([3 => 2, 2 => 1])\nm += ClassicResponse(; h = 2, M = BodyMass([0.1, 2, 3]))\nm += LogisticGrowth(; r = 1, K = 10)\nm += Metabolism(:Miele2019)\nm += Mortality(0)\n\nRead and write properties of the model\n\nFirst all properties contained in the model can be listed with:\n\nproperties(m) # Where m is a Model.\n\nThen, the value of a property can be read with get_<X> where X is the name of the property. For instance, to read mortality rates:\n\nget_mortality(m) # Equivalent to: m.mortality.\n\nYou can also re-write properties of the model using set_<X>!. However, not all properties can be re-written, because some of them are derived from the others. For instance, many parameters are derived from species body masses, therefore changing body masses would make the model inconsistent. However, terminal properties can be re-written, as the species metabolic rate.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#EcologicalNetworksDynamics.Species","page":"Public","title":"EcologicalNetworksDynamics.Species","text":"The Species component adds the most basic nodes compartment into the model: species. There is one node per species, and every species is given a unique name and index. The species ordering specified in this compartment is the reference species ordering.\n\njulia> sp = Species([\"hen\", \"fox\", \"snake\"])\nblueprint for Species:\n  names: 3-element Vector{Symbol}:\n :hen\n :fox\n :snake\n\njulia> m = Model(sp)\nModel with 1 component:\n  - Species: 3 (:hen, :fox, :snake)\n\njulia> Model(Species(5)) # Default names generated.\nModel with 1 component:\n  - Species: 5 (:s1, :s2, :s3, :s4, :s5)\n\nTypically, the species component is implicitly brought by other blueprints.\n\njulia> Model(Foodweb([:a => :b]))\nModel with 2 components:\n  - Species: 2 (:a, :b)\n  - Foodweb: 1 link\n\njulia> Model(BodyMass([4, 5, 6]))\nModel with 2 components:\n  - Species: 3 (:s1, :s2, :s3)\n  - Body masses: [4.0, 5.0, 6.0]\n\nThe species component makes the following properties available to a model m:\n\nm.S or m.richness or m.species_richness or m.n_species: number of species in the model.\nm.species_names: list of species name in reference order.\nm.species_index: get a species_name mapsto species_index mapping.\n\njulia> (m.S, m.richness, m.species_richness, m.n_species) # All aliases for the same thing.\n(3, 3, 3, 3)\n\njulia> m.species_names\n3-element EcologicalNetworksDynamics.SpeciesNames:\n :hen\n :fox\n :snake\n\njulia> m.species_index\nOrderedCollections.OrderedDict{Symbol, Int64} with 3 entries:\n  :hen   => 1\n  :fox   => 2\n  :snake => 3\n\n\n\n\n\n","category":"type"},{"location":"","page":"Welcome","title":"Welcome","text":"CurrentModule = EcologicalNetworksDynamics","category":"page"},{"location":"#EcologicalNetworksDynamics","page":"Welcome","title":"EcologicalNetworksDynamics","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"EcologicalNetworksDynamics is a package designed to simulate species biomass dynamics in ecological networks. These networks can contain either trophic interactions only (food webs), or trophic interactions plus various non-trophic interactions (multiplex networks). We provide functions to generate food web structure from well-known structural models as the niche model. We designed EcologicalNetworksDynamics so that it is easy to use for non-specialists, while remaining flexible for more experienced users who would like to tweak the model.","category":"page"},{"location":"#Before-you-start","page":"Welcome","title":"Before you start","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"Before anything else, to use EcologicalNetworksDynamics you have to install Julia. For that go to the official download page. Once you have successfully installed Julia, you can install the package by running from a Julia terminal:","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"using Pkg\nPkg.add(\"EcologicalNetworksDynamics\")","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"To check that the package installation went well, you can load the package:","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"using EcologicalNetworksDynamics","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"You can now create a simple food web with:","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"Foodweb([1 => 2])","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"This is a two-species food web in which species 1 eats species 2.","category":"page"},{"location":"#Learning-EcologicalNetworksDynamics","page":"Welcome","title":"Learning EcologicalNetworksDynamics","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"The Quick Start page shows how to simulate biomass dynamics in a simple food web. The rest of the guide provides a step by step introduction to the package features, from the generation of the network structure to the simulation of the biomass dynamics. At each step, we detail how the model can be customized at your will. Lastly, the Tutorials section contains realistic use-cases of EcologicalNetworksDynamics.","category":"page"},{"location":"#Getting-help","page":"Welcome","title":"Getting help","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"During your journey learning EcologicalNetworksDynamics you might encounter issues. If so the best is to open an issue on the GitHub page of EcologicalNetworksDynamics. To ensure that we can help you efficiently, please provide a short description of your problem, and a minimal example to reproduce the error you encountered.","category":"page"},{"location":"#How-can-I-contribute?","page":"Welcome","title":"How can I contribute?","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"The easiest way to contribute is to open an issue if you spot a bug, a typo or can't manage to do something. Another way is to fork the repository, start working from the dev branch, and when ready, submit a pull request. The contribution guidelines are detailed here.","category":"page"},{"location":"#Citing","page":"Welcome","title":"Citing","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"Please cite EcologicalNetworksDynamics if you use it in research, teaching, or other activities.","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"TODO: add paper DOI\npackage: DOI:10.5281/zenodo.14609708","category":"page"},{"location":"man/simple-models/#Build-Simple-Models","page":"Build Simple Models","title":"Build Simple Models","text":"","category":"section"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"We represent community models as objects of type Model. The Model contains all the parameters needed to simulate the dynamics of a community of species. These parameters correspond mostly to species traits and interaction strengths. They can be set up manually or generated automatically from a Foodweb.","category":"page"},{"location":"man/simple-models/#Create-a-Default-Model","page":"Build Simple Models","title":"Create a Default Model","text":"","category":"section"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"The Model contains many parameters, and it can be cumbersome to set them all up manually. Therefore, we provide a function default_model that generates a model with default parameters to ease the process. The function default_model generates a model from a Foodweb.","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"using EcologicalNetworksDynamics\nm = default_model(Foodweb([3 => 2, 2 => 1]))","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"By default, the predator functional response is classic and the producer growth is logistic. Moreover, species traits are taken from Miele et al. (2019). For details on the default parameters, see the Parameter Table.","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"If you want to change the default parameters, you can do so by passing the corresponding component as an argument to the default_model function. For instance, by default species body masses are set so that the predator body mass is 10 times the prey body mass.","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"m1 = default_model(Foodweb([3 => 2, 2 => 1]))\nm1.body_masses","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"But let's say you want to set the body mass of all species to 1.5, then you can do:","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"m2 = default_model(Foodweb([3 => 2, 2 => 1]), BodyMass(1.5))\nm2.body_masses","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"You can also change the default predator-prey body mass ratio to set up species body masses:","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"m3 = default_model(Foodweb([3 => 2, 2 => 1]), BodyMass(; Z = 5))\nm3.body_masses","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"In the example above the body mass of the predator is 5 times the body mass of the prey, starting with a body mass of 1 for the primary producer.","category":"page"},{"location":"man/simple-models/#Access-the-Model-Data","page":"Build Simple Models","title":"Access the Model Data","text":"","category":"section"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"The parameters held by the model can be accessed via the various model properties, with functions named get_<X>:","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"get_hill_exponent(m)","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"get_body_masses(m)","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"get_efficiency(m)","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"Alternatively, you can access the same data with the following syntax:","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"m.hill_exponent # Same as get_hill_exponent(m).\nm.body_masses # Same as get_body_masses(m).\nm.efficiency # Same as get_efficiency(m).\nnothing # hide","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"The properties of the model can be viewed with:","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"properties(m)","category":"page"},{"location":"man/simple-models/#Change-the-Model-Data","page":"Build Simple Models","title":"Change the Model Data","text":"","category":"section"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"Some parameters can be modified after the model was created, either with set_<x>!(m, value) or m.<x> = value. However, not all parameters can be modified in this way for consistency issues. For instance, many parameters are derived from body masses, therefore changing the body masses would make the model inconsistent.","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"# OK: terminal data can be changed.\nset_hill_exponent!(m, 2.1)\nm.hill_exponent = 2.1 # (same)\n\ntry # hide\n# Not OK: this would make the rest of the model data inconsistent.\nm.body_masses = [1, 2, 3]\ncatch err; print(stderr, \"ERROR: \"); showerror(stderr, err); end # hide","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"If you need a model with different values for non-modifiable properties, you need to build a new model with the values you desire.","category":"page"},{"location":"man/simple-models/#Create-Your-Own-Model-Manually","page":"Build Simple Models","title":"Create Your Own Model Manually","text":"","category":"section"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"It is also possible to create a model manually by adding the components one by one. First, create an empty model:","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"m = Model()","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"Then add your components one by one. Note that you have to add the components in the right order, as some components depend on others. Moreover, some components are mandatory. Specifically, you need to provide a food web, species metabolic classes, body masses, a functional response, metabolic rates and a producer growth function.","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"m = Model()\nm += Foodweb([3 => 2, 2 => 1])\nm += BodyMass(; Z = 3)\nm += MetabolicClass(:all_invertebrates)\nm += ClassicResponse(; h = 2)\nm += LogisticGrowth(; r = 1, K = 10)\nm += Metabolism(:Miele2019)\nm += Mortality(0)","category":"page"},{"location":"man/simple-models/","page":"Build Simple Models","title":"Build Simple Models","text":"Now we have a model ready to be simulated. We explain how to do so in the section Simulate the Model. But, first we explain how to create more sophisticated models in the following section Build Advanced Models.","category":"page"},{"location":"man/quickstart/#Quick-start","page":"Quick Start","title":"Quick start","text":"","category":"section"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"If it's your first time using EcologicalNetworksDynamics, exploring this example might be useful to you so that you understand how the package works. Try pasting the following code blocks in a Julia terminal.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"The first step is to create the structure of the trophic interactions.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"ENV[\"GKSwstype\"] = \"100\" # See https://documenter.juliadocs.org/stable/man/syntax/ # hide\nusing EcologicalNetworksDynamics, Plots\nfw = Foodweb([1 => 2, 2 => 3]) # 1 eats 2, and 2 eats 3.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Then, you can generate the parameter of the model (mostly species traits) with:","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"m = default_model(fw)","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"For instance, we can access the species metabolic rates with:","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"m.metabolism","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"We see that while consumers (species 1 and 2) have a positive metabolic rate, producer species (species 3) have a null metabolic rate.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Use properties to list all properties of the model:","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"properties(m)","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"At this step we are ready to run simulations, we just need to provide initial conditions for species biomasses.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"B0 = [0.1, 0.1, 0.1] # The 3 species start with a biomass of 0.1.\nt = 100 # The simulation will run for 100 time units.\nout = simulate(m, B0, t)","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"Lastly, we can plot the biomass trajectories using the plot functions of Plots.","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"plot(out)\nsavefig(\"quickstart.png\") # hide\nnothing # hide","category":"page"},{"location":"man/quickstart/","page":"Quick Start","title":"Quick Start","text":"(Image: Quickstart plot)","category":"page"}]
}
